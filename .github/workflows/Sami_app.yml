name: uami-to-app-powershell-end-to-end

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write  # required for OIDC
  contents: read

env:
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  UAMI_CLIENT_ID: ${{ secrets.AZURE_UAMI_CLIENT_ID }}
  APP_CLIENT_ID: ${{ secrets.AZURE_APP_CLIENT_ID }}
  GRAPH_SCOPE: "https://graph.microsoft.com/.default"
  UAMI_AUDIENCE: "api://AzureADTokenExchange"  # must match UAMI federated credential

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Step 1: Request GitHub OIDC token ----
      - name: Get GitHub OIDC token for UAMI
        shell: pwsh
        run: |
          $audience = "${{ env.UAMI_AUDIENCE }}"

          if (-not $env:ACTIONS_ID_TOKEN_REQUEST_URL) { throw "ACTIONS_ID_TOKEN_REQUEST_URL not set" }
          if (-not $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN) { throw "ACTIONS_ID_TOKEN_REQUEST_TOKEN not set" }

          $headers = @{
                'Authorization' = "Bearer $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN"
              }
              
              $uri = "$env:ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange"
              $jwtResponse = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get -ErrorAction Stop

          $oidcToken = $jwtResponse.value

          Write-Host [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($oidcToken))

          if (-not $oidcToken) { throw "OIDC token not found" }
          if (($oidcToken -split '\.').Length -ne 3) { throw "OIDC token is not a valid JWT" }

          # Decode JWT payload to validate audience
          $payload = $oidcToken.Split('.')[1]
          $payload += ('=' * (4 - ($payload.Length % 4))) # pad base64
          $decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload))
          $payloadObj = ConvertFrom-Json $decoded

          # if ($payloadObj.aud -ne $audience) { throw "OIDC token audience mismatch: $($payloadObj.aud)" }

          Write-Host "OIDC token acquired (first 20 chars): $($oidcToken.Substring(0,20))"
          $env:OIDC_TOKEN = $oidcToken

      # ---- Step 2: Exchange OIDC token for UAMI token ----
      - name: Exchange OIDC token for UAMI token
        shell: pwsh
        run: |
          $tenantId = "${{ env.TENANT_ID }}"
          $uamiClientId = "${{ env.UAMI_CLIENT_ID }}"
          $oidcToken = $env:OIDC_TOKEN

          Write-Host "Exchanging OIDC token for UAMI token..."
          $body = @{
              client_id = $uamiClientId
              scope = "api://AzureADTokenExchange/.default"
              grant_type = "urn:ietf:params:oauth:grant-type:jwt-bearer"
              requested_token_use = "on_behalf_of"
              assertion = $oidcToken
          }

          function ConvertTo-FormData($hash) {
              return ($hash.GetEnumerator() | ForEach-Object { 
                  [System.Web.HttpUtility]::UrlEncode($_.Key) + "=" + [System.Web.HttpUtility]::UrlEncode($_.Value) 
              }) -join "&"
          }

          $bodyEncoded = ConvertTo-FormData $body
          $tokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token"
          $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $bodyEncoded -ContentType "application/x-www-form-urlencoded"

          if (-not $resp.access_token) { throw "UAMI token exchange failed" }
          $env:MI_TOKEN = $resp.access_token
          Write-Host "UAMI token acquired (first 20 chars): $($resp.access_token.Substring(0,20))"

      # ---- Step 3: Exchange UAMI token for App token ----
      - name: Exchange UAMI token for App token
        shell: pwsh
        run: |
          $tenant   = "${{ env.TENANT_ID }}"
          $appId    = "${{ env.APP_CLIENT_ID }}"
          $miToken  = $env:MI_TOKEN
          $scope    = "${{ env.GRAPH_SCOPE }}"
          $tokenUrl = "https://login.microsoftonline.com/$tenant/oauth2/v2.0/token"

          Write-Host "Exchanging UAMI token for App token..."
          $body = @{
              client_id             = $appId
              grant_type            = "client_credentials"
              scope                 = $scope
              client_assertion_type = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
              client_assertion      = $miToken
          }

          $bodyEncoded = ConvertTo-FormData $body
          $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $bodyEncoded -ContentType "application/x-www-form-urlencoded"

          if (-not $resp.access_token) { throw "App token exchange failed" }
          $env:APP_TOKEN = $resp.access_token
          Write-Host "App token acquired (first 20 chars): $($resp.access_token.Substring(0,20))"

      # ---- Step 4: Call Microsoft Graph using App token ----
      - name: Call Microsoft Graph (list one user)
        shell: pwsh
        run: |
          $headers = @{ Authorization = "Bearer $env:APP_TOKEN" }
          $r = Invoke-RestMethod -Method GET -Headers $headers `
               -Uri "https://graph.microsoft.com/v1.0/users?`$top=1&`$select=id,displayName"
          $r.value | Format-Table id, displayName
