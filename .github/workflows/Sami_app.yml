# .github/workflows/Sami_app.yml

name: BlackCat - Secure Azure Token Exchange
on: [workflow_dispatch]

permissions:
  id-token: write
  contents: read

env:
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  UAMI_CLIENT_ID: ${{ secrets.UAMI_CLIENT_ID }}
  APP_CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
  GRAPH_SCOPE: "https://graph.microsoft.com/.default"

jobs:
  token-exchange:
    runs-on: ubuntu-latest
    steps:
      - name: Echo environment variables
        shell: pwsh
        run: |
          Write-Host "TENANT_ID: $env:TENANT_ID"
          Write-Host "UAMI_CLIENT_ID: $env:UAMI_CLIENT_ID"
          Write-Host "APP_CLIENT_ID: $env:APP_CLIENT_ID"
          Write-Host "GRAPH_SCOPE: $env:GRAPH_SCOPE"
          # Persist for next steps (if needed)
          "TENANT_ID=$env:TENANT_ID" | Out-File -FilePath $env:GITHUB_ENV -Append
          "UAMI_CLIENT_ID=$env:UAMI_CLIENT_ID" | Out-File -FilePath $env:GITHUB_ENV -Append
          "APP_CLIENT_ID=$env:APP_CLIENT_ID" | Out-File -FilePath $env:GITHUB_ENV -Append
          "GRAPH_SCOPE=$env:GRAPH_SCOPE" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Acquire OIDC Token
        shell: pwsh
        run: |
          # Simulate OIDC token acquisition (replace with real logic as needed)
          $oidcToken = "SIMULATED_OIDC_TOKEN"
          Write-Host "OIDC token acquired (first 20 chars): $($oidcToken.Substring(0,20))"
          $env:OIDC_TOKEN = $oidcToken
          "OIDC_TOKEN=$oidcToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Exchange OIDC token for UAMI token
        shell: pwsh
        run: |
          $tenantId = $env:TENANT_ID
          $uamiClientId = $env:UAMI_CLIENT_ID
          $oidcToken = $env:OIDC_TOKEN

          if (-not $uamiClientId) { Write-Host "❌ UAMI_CLIENT_ID not set."; exit 1 }
          if (-not $oidcToken) { Write-Host "❌ OIDC_TOKEN not set."; exit 1 }

          Write-Host "Exchanging OIDC token for UAMI token..."
          $body = @{
              client_id = $uamiClientId
              scope = "api://AzureADTokenExchange/.default"
              grant_type = "urn:ietf:params:oauth:grant-type:jwt-bearer"
              requested_token_use = "on_behalf_of"
              assertion = $oidcToken
          }
          function ConvertTo-FormData($hash) {
              return ($hash.GetEnumerator() | ForEach-Object { 
                  [System.Web.HttpUtility]::UrlEncode($_.Key) + "=" + [System.Web.HttpUtility]::UrlEncode($_.Value) 
              }) -join "&"
          }
          $bodyEncoded = ConvertTo-FormData $body
          $tokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token"
          $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $bodyEncoded -ContentType "application/x-www-form-urlencoded"
          if (-not $resp.access_token) { throw "UAMI token exchange failed" }
          $env:MI_TOKEN = $resp.access_token
          Write-Host "UAMI token acquired (first 20 chars): $($resp.access_token.Substring(0,20))"
          "MI_TOKEN=$($resp.access_token)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Exchange UAMI token for App token
        shell: pwsh
        run: |
          $tenant = $env:TENANT_ID
          $appId = $env:APP_CLIENT_ID
          $miToken = $env:MI_TOKEN
          $scope = $env:GRAPH_SCOPE

          if (-not $appId) { Write-Host "❌ APP_CLIENT_ID not set."; exit 1 }
          if (-not $miToken) { Write-Host "❌ MI_TOKEN not set."; exit 1 }

          Write-Host "Exchanging UAMI token for App token..."
          $body = @{
              client_id             = $appId
              grant_type            = "client_credentials"
              scope                 = $scope
              client_assertion_type = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
              client_assertion      = $miToken
          }
          function ConvertTo-FormData($hash) {
              return ($hash.GetEnumerator() | ForEach-Object { 
                  [System.Web.HttpUtility]::UrlEncode($_.Key) + "=" + [System.Web.HttpUtility]::UrlEncode($_.Value) 
              }) -join "&"
          }
          $bodyEncoded = ConvertTo-FormData $body
          $tokenUrl = "https://login.microsoftonline.com/$tenant/oauth2/v2.0/token"
          $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $bodyEncoded -ContentType "application/x-www-form-urlencoded"
          if (-not $resp.access_token) { throw "App token exchange failed" }
          $env:APP_TOKEN = $resp.access_token
          Write-Host "App token acquired (first 20 chars): $($resp.access_token.Substring(0,20))"
          "APP_TOKEN=$($resp.access_token)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Call Microsoft Graph using App token
        shell: pwsh
        run: |
          $appToken = $env:APP_TOKEN
          if (-not $appToken) { Write-Host "❌ APP_TOKEN not set."; exit 1 }
          Write-Host "Calling Microsoft Graph API..."
          # Example call (replace with actual API call as needed)
          $graphUrl = "https://graph.microsoft.com/v1.0/me"
          $headers = @{ Authorization = "Bearer $appToken" }
          try {
            $response = Invoke-RestMethod -Uri $graphUrl -Headers $headers -Method Get
            Write-Host "Graph API response: $($response | ConvertTo-Json -Depth 3)"
          } catch {
            Write-Host "Graph API call failed: $($_.Exception.Message)"
          }
