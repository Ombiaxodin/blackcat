name: uami-to-app-powershell-demo

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write     # required for GitHub OIDC
  contents: read

env:
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}          # Azure tenant GUID
  UAMI_CLIENT_ID: ${{ secrets.AZURE_UAMI_CLIENT_ID }}# UAMI clientId
  APP_CLIENT_ID:  ${{ secrets.AZURE_APP_CLIENT_ID }} # App Registration clientId
  GRAPH_SCOPE: "https://graph.microsoft.com/.default"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Hop 1: GitHub OIDC -> UAMI ----
      - name: Get UAMI token via GitHub OIDC
        shell: pwsh
        run: |
          $tenantId = "${{ env.TENANT_ID }}"
          $uamiClientId = "${{ env.UAMI_CLIENT_ID }}"
          $oidcToken = $env:GITHUB_ACTIONS_ID_TOKEN_REQUEST_TOKEN

          Write-Host "Exchanging GitHub OIDC token for UAMI token..."
          $body = @{
              client_id = $uamiClientId
              scope = "api://AzureADTokenExchange/.default"
              grant_type = "urn:ietf:params:oauth:grant-type:jwt-bearer"
              requested_token_use = "on_behalf_of"
              assertion = $oidcToken
          }

          $tokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token"
          $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $body -ContentType "application/x-www-form-urlencoded"

          if (-not $resp.access_token) { throw "UAMI token exchange failed" }

          Write-Host "UAMI token acquired (first 20 chars): $($resp.access_token.Substring(0,20))"
          $env:MI_TOKEN = $resp.access_token

      # ---- Hop 2: UAMI token -> App Registration token ----
      - name: Exchange UAMI token for App token
        shell: pwsh
        run: |
          $tenant   = "${{ env.TENANT_ID }}"
          $appId    = "${{ env.APP_CLIENT_ID }}"
          $miToken  = $env:MI_TOKEN
          $scope    = "${{ env.GRAPH_SCOPE }}"
          $tokenUrl = "https://login.microsoftonline.com/$tenant/oauth2/v2.0/token"

          Write-Host "Exchanging UAMI token for App token..."
          $body = @{
              client_id             = $appId
              grant_type            = "client_credentials"
              scope                 = $scope
              client_assertion_type = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
              client_assertion      = $miToken
          }

          $resp = Invoke-RestMethod -Method POST -Uri $tokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
          if (-not $resp.access_token) { throw "App token exchange failed" }

          Write-Host "App token acquired (first 20 chars): $($resp.access_token.Substring(0,20))"
          $env:APP_TOKEN = $resp.access_token

      # ---- Use App token to call Microsoft Graph ----
      - name: Call Microsoft Graph (list one user)
        shell: pwsh
        run: |
          $headers = @{ Authorization = "Bearer $env:APP_TOKEN" }
          $r = Invoke-RestMethod -Method GET -Headers $headers `
               -Uri "https://graph.microsoft.com/v1.0/users?`$top=1&`$select=id,displayName"
          $r.value | Format-Table id, displayName

      # ---- Optional: Decode JWTs for debugging ----
      - name: Show token payloads (debug)
        if: always()
        shell: pwsh
        run: |
          function Decode-Jwt($jwt) {
              $parts = $jwt -split '\.'
              $pad = { param($s) return $s + ('=' * ((4 - ($s.Length % 4)) % 4)) }
              $payload = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String((& $pad $parts[1]).Replace('-', '+').Replace('_','/')))
              return $payload
          }

          Write-Host "UAMI token payload: $(Decode-Jwt $env:MI_TOKEN)"
          Write-Host "App token payload: $(Decode-Jwt $env:APP_TOKEN)"
