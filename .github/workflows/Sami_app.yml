name: "Enterprise Infrastructure Automation (2)"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      operation_mode:
        description: 'Operation Mode'
        required: true
        default: 'monitoring'
        type: choice
        options:
        - monitoring
        - maintenance
        - emergency

permissions:
  id-token: write
  contents: read

env:
  OPERATION_ID: ${{ github.run_id }}-${{ github.run_attempt }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  UAMI_CLIENT_ID: ${{ secrets.UAMI_CLIENT_ID }}

jobs:
  infrastructure-automation:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: "Initialize Operation Context"
        shell: pwsh
        run: |
          Write-Host "üîß Starting infrastructure automation workflow" -ForegroundColor Cyan
          Write-Host "Operation ID: $env:OPERATION_ID" -ForegroundColor White
          Write-Host "Environment: ${{ inputs.environment }}" -ForegroundColor White
          Write-Host "Mode: ${{ inputs.operation_mode }}" -ForegroundColor White
          Write-Host "Timestamp: $((Get-Date).ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss UTC'))" -ForegroundColor White
      - name: "Acquire GitHub OIDC Token"
        shell: pwsh
        run: |
          Write-Host "üîê Acquiring GitHub OIDC authentication token..." -ForegroundColor Cyan
          
          # Enhanced error handling for token acquisition
          $maxAttempts = 3
          $githubToken = $null
          
          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            try {
              $headers = @{
                'Authorization' = "Bearer $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN"
              }
              
              $uri = "$env:ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange"
              $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get -ErrorAction Stop
              
              if ($response.value -and $response.value -ne "null") {
                $githubToken = $response.value
                Write-Host "‚úÖ GitHub OIDC token acquired successfully (attempt $attempt)" -ForegroundColor Green
                break
              } else {
                Write-Host "‚ö†Ô∏è Token acquisition failed (attempt $attempt/$maxAttempts)" -ForegroundColor Yellow
                Start-Sleep -Seconds ($attempt * 2)
              }
            }
            catch {
              Write-Host "‚ö†Ô∏è Token acquisition failed (attempt $attempt/$maxAttempts): $($_.Exception.Message)" -ForegroundColor Yellow
              Start-Sleep -Seconds ($attempt * 2)
            }
          }
          
          if (-not $githubToken) {
            Write-Host "‚ùå Failed to acquire GitHub OIDC token after $maxAttempts attempts" -ForegroundColor Red
            exit 1
          }
          
          # Set environment variable for next step
          "GITHUB_TOKEN=$githubToken" | Out-File -FilePath $env:GITHUB_ENV -Append
      
      - name: "Exchange for UAMI Token"
        shell: pwsh
        run: |
          Write-Host "üîÑ Exchanging GitHub token for Azure UAMI token..." -ForegroundColor Cyan
          
          # Validate required environment variables
          if (-not $env:TENANT_ID) {
            Write-Host "‚ùå TENANT_ID not set. Add AZURE_TENANT_ID to repository secrets or variables." -ForegroundColor Red
            exit 1
          }
          
          if (-not $env:UAMI_CLIENT_ID) {
            Write-Host "‚ùå UAMI_CLIENT_ID not set. Add UAMI_CLIENT_ID to repository secrets or variables." -ForegroundColor Red
            exit 1
          }
          
          # Enhanced token exchange with proper error handling
          Write-Host "üîç Attempting UAMI token exchange..." -ForegroundColor Cyan
          
          try {
            $body = @{
              'client_id' = $env:UAMI_CLIENT_ID
              'grant_type' = 'client_credentials'
              'client_assertion_type' = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
              'client_assertion' = $env:GITHUB_TOKEN
              'scope' = 'https://graph.microsoft.com/.default'
            }
            
            $uri = "https://login.microsoftonline.com/$env:TENANT_ID/oauth2/v2.0/token"
            $response = Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType 'application/x-www-form-urlencoded' -ErrorAction Stop
            $encoded  = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($response))
            Write-Host $encoded
            
            if ($response.access_token) {
              Write-Host "‚úÖ UAMI token acquired successfully" -ForegroundColor Green
              "UAMI_TOKEN=$($response.access_token)" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Host "‚ùå No access token in response" -ForegroundColor Red
              Write-Host "Response: $($response | ConvertTo-Json)" -ForegroundColor Red
              exit 1
            }
          }
          catch {
            Write-Host "‚ùå Failed to acquire UAMI token - $($_.Exception.Message)" -ForegroundColor Red
            
            # Parse error details if available
            if ($_.ErrorDetails.Message) {
              try {
                $errorDetails = $_.ErrorDetails.Message | ConvertFrom-Json
                Write-Host "Error: $($errorDetails.error_description)" -ForegroundColor Red
                
                # Provide troubleshooting guidance
                switch ($errorDetails.error) {
                  'invalid_client' {
                    Write-Host "üí° Check: UAMI_CLIENT_ID is correct and UAMI exists in tenant" -ForegroundColor Yellow
                  }
                  { $_ -in @('invalid_grant', 'invalid_request') } {
                    Write-Host "üí° Check: Federated identity credential configuration" -ForegroundColor Yellow
                    Write-Host "   - Issuer: https://token.actions.githubusercontent.com" -ForegroundColor Yellow
                    Write-Host "   - Subject matches your repo pattern" -ForegroundColor Yellow
                    Write-Host "   - Audience: api://AzureADTokenExchange" -ForegroundColor Yellow
                  }
                  'unauthorized_client' {
                    Write-Host "üí° Check: UAMI has required Graph permissions" -ForegroundColor Yellow
                  }
                }
              }
              catch {
                Write-Host "Error details could not be parsed" -ForegroundColor Red
              }
            }
            exit 1
          }
