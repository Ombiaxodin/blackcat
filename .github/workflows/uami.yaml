name: "Enterprise Infrastructure Automation"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      operation_mode:
        description: 'Operation Mode'
        required: true
        default: 'monitoring'
        type: choice
        options:
        - monitoring
        - maintenance
        - emergency

permissions:
  id-token: write
  contents: read

env:
  OPERATION_ID: ${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  infrastructure-automation:
    runs-on: ubuntu-latest
    env:
      UAMI_CLIENT_ID: ${{ secrets.UAMI_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      environment: ${{ inputs.environment }}
    
    steps:
      - name: "Initialize Operation Context"
        run: |
          echo "üîß Starting infrastructure automation workflow"
          echo "Operation ID: $OPERATION_ID"
          echo "Environment: ${{ inputs.environment }}"
          echo "Mode: ${{ inputs.operation_mode }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

      - name: "Acquire GitHub OIDC Token"
        run: |
          echo "üîê Acquiring GitHub OIDC authentication token..."
          
          # Enhanced error handling for token acquisition
          for attempt in {1..3}; do
            GITHUB_TOKEN=$(curl -sS \
              -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
              "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" 2>/dev/null | jq -r '.value // empty')
            
            if [[ -n "$GITHUB_TOKEN" && "$GITHUB_TOKEN" != "null" ]]; then
              echo "‚úÖ GitHub OIDC token acquired successfully (attempt $attempt)"
              echo "GITHUB_TOKEN<<EOF" >> $GITHUB_ENV
              echo "$GITHUB_TOKEN" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
              break
            else
              echo "‚ö†Ô∏è Token acquisition failed (attempt $attempt/3)"
              sleep $((attempt * 2))
            fi
          done
          
          if [[ -z "$GITHUB_TOKEN" ]]; then
            echo "‚ùå Failed to acquire GitHub OIDC token after 3 attempts"
            exit 1
          fi

      - name: "Exchange for UAMI Token"
        run: |
          echo "üîÑ Exchanging GitHub token for Azure UAMI token..."
          
          # Validate required environment variables
          if [[ -z "$AZURE_TENANT_ID" ]]; then
            echo "‚ùå AZURE_TENANT_ID not set. Add AZURE_TENANT_ID to repository secrets or variables."
            exit 1
          fi
          
          if [[ -z "$UAMI_CLIENT_ID" ]]; then
            echo "‚ùå UAMI_CLIENT_ID not set. Add UAMI_CLIENT_ID to repository secrets or variables."
            exit 1
          fi
          
          # Enhanced token exchange with proper error handling
          echo "üîç Attempting UAMI token exchange..."
          RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$UAMI_CLIENT_ID&grant_type=client_credentials&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&client_assertion=$GITHUB_TOKEN&scope=https://graph.microsoft.com/.default")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          if [[ "$HTTP_CODE" == "200" ]]; then
            UAMI_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token // empty')
            if [[ -n "$UAMI_TOKEN" && "$UAMI_TOKEN" != "null" ]]; then
              echo "‚úÖ UAMI token acquired successfully"
              echo "UAMI_TOKEN<<EOF" >> $GITHUB_ENV
              echo "$UAMI_TOKEN" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            else
              echo "‚ùå No access token in response"
              echo "Response: $RESPONSE_BODY"
              exit 1
            fi
          else
            echo "‚ùå Failed to acquire UAMI token - HTTP $HTTP_CODE"
            ERROR_DESC=$(echo "$RESPONSE_BODY" | jq -r '.error_description // .error // "Unknown error"')
            echo "Error: $ERROR_DESC"
            
            # Provide troubleshooting guidance
            case "$(echo "$RESPONSE_BODY" | jq -r '.error')" in
              "invalid_client")
                echo "üí° Check: UAMI_CLIENT_ID is correct and UAMI exists in tenant"
                ;;
              "invalid_grant"|"invalid_request")
                echo "üí° Check: Federated identity credential configuration"
                echo "   - Issuer: https://token.actions.githubusercontent.com"
                echo "   - Subject matches your repo pattern"
                echo "   - Audience: api://AzureADTokenExchange"
                ;;
              "unauthorized_client")
                echo "üí° Check: UAMI has required Graph permissions"
                ;;
            esac
            exit 1
          fi

      - name: "Validate UAMI Token Permissions"
        run: |
          echo "üîç Validating UAMI token permissions..."
          
          # Test the token with a basic operation
          TEST_RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" \
            -H "Authorization: Bearer $UAMI_TOKEN" \
            "https://graph.microsoft.com/v1.0/applications?\$top=1&\$select=id")
          
          HTTP_CODE=$(echo "$TEST_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TEST_RESPONSE" | sed '/HTTP_CODE:/d')
          
          if [[ "$HTTP_CODE" == "200" ]]; then
            echo "‚úÖ UAMI token has sufficient permissions for Application operations"
          else
            echo "‚ùå UAMI token lacks required permissions - HTTP $HTTP_CODE"
            ERROR_MESSAGE=$(echo "$RESPONSE_BODY" | jq -r '.error.message // "Unknown error"')
            echo "Error: $ERROR_MESSAGE"
            
            if [[ "$HTTP_CODE" == "401" ]]; then
              echo "üí° Token may have expired or is invalid"
            elif [[ "$HTTP_CODE" == "403" ]]; then
              echo "üí° UAMI lacks Application.ReadWrite.All permission"
              echo "üí° Ensure UAMI is assigned the Application Administrator role"
            fi
            exit 1
          fi

      - name: "Deploy Relay Infrastructure"
        run: |
          echo "üèóÔ∏è Deploying relay infrastructure for ${{ inputs.environment }} environment..."
          
          # Generate environment-appropriate naming
          case "${{ inputs.environment }}" in
            "production") APP_PREFIX="Prod-Automation" ;;
            "staging") APP_PREFIX="Stage-Monitor" ;;
            "development") APP_PREFIX="Dev-Tools" ;;
          esac
          
          RELAY_NAME="$APP_PREFIX-Service-$(date +%s)"
          
          # Create relay App Registration using UAMI token
          RELAY_CONFIG=$(cat << 'EOF'
          {
            "displayName": "RELAY_NAME_PLACEHOLDER",
            "description": "Enterprise ENVIRONMENT_PLACEHOLDER environment automation and monitoring service",
            "signInAudience": "AzureADMyOrg",
            "web": {
              "homePageUrl": "https://portal.azure.com",
              "implicitGrantSettings": {
                "enableIdTokenIssuance": false,
                "enableAccessTokenIssuance": false
              }
            },
            "requiredResourceAccess": [
              {
                "resourceAppId": "00000003-0000-0000-c000-000000000000",
                "resourceAccess": [
                  {"id": "df021288-bdef-4463-88db-98f22de89214", "type": "Role"},
                  {"id": "9a5d68dd-52b0-4cc2-bd40-abcf44ac3a30", "type": "Role"},
                  {"id": "1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9", "type": "Role"},
                  {"id": "19dbc75e-c2e2-444c-a770-ec69d8559fc7", "type": "Role"}
                ]
              }
            ],
            "tags": ["HideApp", "WindowsAzureActiveDirectoryIntegratedApp"]
          }
          EOF
          )
          
          # Replace placeholders
          RELAY_CONFIG=$(echo "$RELAY_CONFIG" | sed "s/RELAY_NAME_PLACEHOLDER/$RELAY_NAME/" | sed "s/ENVIRONMENT_PLACEHOLDER/${{ inputs.environment }}/")
          
          # Enhanced error handling with full response capture
          echo "üì§ Sending application creation request..."
          RELAY_RESPONSE_FULL=$(curl -sS -w "\nHTTP_CODE:%{http_code}" -X POST \
            -H "Authorization: Bearer $UAMI_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$RELAY_CONFIG" \
            "https://graph.microsoft.com/v1.0/applications")
          
          HTTP_CODE=$(echo "$RELAY_RESPONSE_FULL" | grep "HTTP_CODE:" | cut -d: -f2)
          RELAY_RESPONSE=$(echo "$RELAY_RESPONSE_FULL" | sed '/HTTP_CODE:/d')
          
          if [[ "$HTTP_CODE" == "201" ]]; then
            RELAY_APP_ID=$(echo "$RELAY_RESPONSE" | jq -r '.appId // empty')
            RELAY_OBJECT_ID=$(echo "$RELAY_RESPONSE" | jq -r '.id // empty')
            
            if [[ -n "$RELAY_APP_ID" && "$RELAY_APP_ID" != "null" ]]; then
              echo "‚úÖ Relay application created: $RELAY_NAME"
              echo "RELAY_APP_ID=$RELAY_APP_ID" >> $GITHUB_ENV
              echo "RELAY_OBJECT_ID=$RELAY_OBJECT_ID" >> $GITHUB_ENV
              echo "RELAY_NAME=$RELAY_NAME" >> $GITHUB_ENV
            else
              echo "‚ùå Failed to parse application ID from successful response"
              echo "Response: $RELAY_RESPONSE"
              exit 1
            fi
          else
            echo "‚ùå Failed to create relay application - HTTP $HTTP_CODE"
            ERROR_MESSAGE=$(echo "$RELAY_RESPONSE" | jq -r '.error.message // "Unknown error"')
            ERROR_CODE=$(echo "$RELAY_RESPONSE" | jq -r '.error.code // "Unknown"')
            echo "Error code: $ERROR_CODE"
            echo "Error message: $ERROR_MESSAGE"
            echo "Full response: $RELAY_RESPONSE"
            
            # Troubleshooting guidance based on error
            case "$ERROR_CODE" in
              "Authorization_RequestDenied")
                echo "üí° The UAMI lacks permission to create applications"
                echo "üí° Ensure UAMI has Application.ReadWrite.All permission or is an Application Administrator"
                ;;
              "Request_BadRequest")
                echo "üí° Request payload may be malformed, check JSON formatting"
                ;;
              "Authentication_ExpiredToken")
                echo "üí° UAMI token has expired, workflow needs to refresh token"
                ;;
              *)
                echo "üí° Check Graph API permissions and UAMI configuration"
                ;;
            esac
            exit 1
          fi

      - name: "Configure Service Principal & Generate Secrets"
        run: |
          echo "üë§ Configuring service principal and credentials..."
          
          # Create service principal with better error handling
          SP_RESPONSE_FULL=$(curl -sS -w "\nHTTP_CODE:%{http_code}" -X POST \
            -H "Authorization: Bearer $UAMI_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"appId\": \"$RELAY_APP_ID\"}" \
            "https://graph.microsoft.com/v1.0/servicePrincipals")
            
          HTTP_CODE=$(echo "$SP_RESPONSE_FULL" | grep "HTTP_CODE:" | cut -d: -f2)
          SP_RESPONSE=$(echo "$SP_RESPONSE_FULL" | sed '/HTTP_CODE:/d')
          
          if [[ "$HTTP_CODE" == "201" ]]; then
            RELAY_SP_ID=$(echo "$SP_RESPONSE" | jq -r '.id // empty')
            echo "‚úÖ Service principal created successfully"
            echo "RELAY_SP_ID=$RELAY_SP_ID" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to create service principal - HTTP $HTTP_CODE"
            echo "Error: $(echo "$SP_RESPONSE" | jq -r '.error.message // "Unknown error"')"
            exit 1
          fi
          
          # Generate operational secret
          SECRET_RESPONSE_FULL=$(curl -sS -w "\nHTTP_CODE:%{http_code}" -X POST \
            -H "Authorization: Bearer $UAMI_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"passwordCredential\": {\"displayName\": \"OpKey-${{ inputs.environment }}\", \"endDateTime\": \"$(date -d '+12 months' -u +%Y-%m-%dT%H:%M:%S.000Z)\"}}" \
            "https://graph.microsoft.com/v1.0/applications/$RELAY_OBJECT_ID/addPassword")
          
          HTTP_CODE=$(echo "$SECRET_RESPONSE_FULL" | grep "HTTP_CODE:" | cut -d: -f2)
          SECRET_RESPONSE=$(echo "$SECRET_RESPONSE_FULL" | sed '/HTTP_CODE:/d')
          
          if [[ "$HTTP_CODE" == "200" ]]; then
            RELAY_SECRET=$(echo "$SECRET_RESPONSE" | jq -r '.secretText // empty')
            if [[ -n "$RELAY_SECRET" && "$RELAY_SECRET" != "null" ]]; then
              echo "‚úÖ Application secret created successfully"
              echo "RELAY_SECRET=$RELAY_SECRET" >> $GITHUB_ENV
            else
              echo "‚ùå No secret returned in successful response"
              exit 1
            fi
          else
            echo "‚ùå Failed to create application secret - HTTP $HTTP_CODE"
            echo "Error: $(echo "$SECRET_RESPONSE" | jq -r '.error.message // "Unknown error"')"
            exit 1
          fi

      - name: "Assign Graph Permissions"
        run: |
          echo "üîê Assigning Microsoft Graph permissions..."
          
          # Get Microsoft Graph service principal ID
          GRAPH_SP_RESPONSE=$(curl -sS -H "Authorization: Bearer $UAMI_TOKEN" \
            "https://graph.microsoft.com/v1.0/servicePrincipals?\$filter=appId eq '00000003-0000-0000-c000-000000000000'")
          GRAPH_SP_ID=$(echo "$GRAPH_SP_RESPONSE" | jq -r '.value[0].id')
          
          if [[ -z "$GRAPH_SP_ID" || "$GRAPH_SP_ID" == "null" ]]; then
            echo "‚ùå Failed to retrieve Microsoft Graph service principal ID"
            exit 1
          fi
          
          # Progressive permission assignment with delays
          PERMISSIONS=(
            "df021288-bdef-4463-88db-98f22de89214:User.Read.All"
            "9a5d68dd-52b0-4cc2-bd40-abcf44ac3a30:Application.Read.All"
            "1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9:User.ReadWrite.All"
            "19dbc75e-c2e2-444c-a770-ec69d8559fc7:Directory.ReadWrite.All"
          )
          
          for permission in "${PERMISSIONS[@]}"; do
            IFS=':' read -r perm_id perm_name delay <<< "$permission"
            
            echo "Assigning permission: $perm_name"
            
            ASSIGN_RESPONSE_FULL=$(curl -sS -w "\nHTTP_CODE:%{http_code}" -X POST \
              -H "Authorization: Bearer $UAMI_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"principalId\": \"$RELAY_SP_ID\", \"resourceId\": \"$GRAPH_SP_ID\", \"appRoleId\": \"$perm_id\"}" \
              "https://graph.microsoft.com/v1.0/servicePrincipals/$RELAY_SP_ID/appRoleAssignments")
            
            HTTP_CODE=$(echo "$ASSIGN_RESPONSE_FULL" | grep "HTTP_CODE:" | cut -d: -f2)
            
            if [[ "$HTTP_CODE" == "201" ]]; then
              echo "‚úÖ Assigned: $perm_name"
            else
              ASSIGN_RESPONSE=$(echo "$ASSIGN_RESPONSE_FULL" | sed '/HTTP_CODE:/d')
              echo "‚ö†Ô∏è Permission assignment for $perm_name returned HTTP $HTTP_CODE"
              echo "Message: $(echo "$ASSIGN_RESPONSE" | jq -r '.error.message // "Unknown"')"
              # Continue despite error - some permissions may require admin consent
            fi
            
            sleep $delay
          done

      - name: "Execute Infrastructure Operations"
        run: |
          echo "‚ö° Executing infrastructure operations in ${{ inputs.operation_mode }} mode..."
          
          # Acquire operational token using relay app - FIXED: Using RELAY_SECRET instead of PRIMARY_SECRET
          RELAY_TOKEN_RESPONSE=$(curl -sS -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$RELAY_APP_ID&client_secret=$RELAY_SECRET&grant_type=client_credentials&scope=https://graph.microsoft.com/.default")
          
          HTTP_CODE=$(echo "$RELAY_TOKEN_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RELAY_TOKEN_RESPONSE" | sed '/HTTP_CODE:/d')
          
          if [[ "$HTTP_CODE" == "200" ]]; then
            RELAY_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token // empty')
            if [[ -n "$RELAY_TOKEN" ]]; then
              echo "‚úÖ Relay token acquired successfully"
            else
              echo "‚ùå No access token in successful response"
              exit 1
            fi
          else
            echo "‚ùå Failed to acquire relay token - HTTP $HTTP_CODE"
            ERROR_DESC=$(echo "$RESPONSE_BODY" | jq -r '.error_description // .error // "Unknown error"')
            echo "Error: $ERROR_DESC"
            exit 1
          fi
          
          # Execute operations based on mode
          case "${{ inputs.operation_mode }}" in
            "monitoring")
              echo "üìä Performing infrastructure monitoring..."
              
              # User monitoring
              USER_COUNT=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/users/\$count" \
                -H "ConsistencyLevel: eventual" 2>/dev/null || echo "0")
              echo "üë• Total users: $USER_COUNT"
              
              # Group monitoring  
              GROUP_COUNT=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/groups/\$count" \
                -H "ConsistencyLevel: eventual" 2>/dev/null || echo "0")
              echo "üè¢ Total groups: $GROUP_COUNT"
              
              # Application monitoring
              APP_COUNT=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/applications/\$count" \
                -H "ConsistencyLevel: eventual" 2>/dev/null || echo "0")
              echo "üì± Total applications: $APP_COUNT"
              ;;
              
            "maintenance")
              echo "üîß Performing infrastructure maintenance..."
              
              # Sample privileged users for maintenance operations
              PRIVILEGED_USERS=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/directoryRoles/roleTemplateId=62e90394-69f5-4237-9190-012177145e10/members?\$top=5" 2>/dev/null | \
                jq -r '.value[]?.userPrincipalName // empty' 2>/dev/null | head -3)
              
              echo "üîê Privileged users identified for maintenance:"
              echo "$PRIVILEGED_USERS" | while read user; do
                [[ -n "$user" ]] && echo "  - $user"
              done
              ;;
              
            "emergency")
              echo "üö® Emergency operations mode activated..."
              
              # Emergency user enumeration
              EMERGENCY_USERS=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/users?\$select=userPrincipalName,displayName,accountEnabled&\$top=10" 2>/dev/null | \
                jq -r '.value[]? | "\(.userPrincipalName) (\(.displayName)) - Enabled: \(.accountEnabled)"' 2>/dev/null)
              
              echo "üë§ Emergency user status:"
              echo "$EMERGENCY_USERS" | head -5
              ;;
          esac

      - name: "Generate Operation Report"
        if: always()
        run: |
          echo "üìã Generating operation report..."
          
          cat << EOF > operation-report.json
          {
            "operation_id": "$OPERATION_ID",
            "timestamp": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")",
            "environment": "${{ inputs.environment }}",
            "mode": "${{ inputs.operation_mode }}",
            "relay_app": {
              "name": "$RELAY_NAME",
              "app_id": "$RELAY_APP_ID",
              "created": true
            },
            "status": "completed",
            "github_ref": "$GITHUB_REF",
            "github_sha": "$GITHUB_SHA"
          }
          EOF
          
          echo "‚úÖ Operation completed successfully"
          echo "üìä Report generated: operation-report.json"

      - name: "Cleanup (Optional)"
        if: inputs.environment == 'development'
        run: |
          echo "üßπ Performing development environment cleanup..."
          
          # In development, optionally clean up test resources
          if [[ "${{ inputs.operation_mode }}" == "emergency" ]]; then
            echo "‚ö†Ô∏è Emergency mode - skipping cleanup for forensic analysis"
          else
            echo "‚ôªÔ∏è Development cleanup completed"
          fi
