name: Secure Azure Token Exchange

on:
  workflow_dispatch:

permissions:
  id-token: write  # Required for OIDC token request
  contents: read

jobs:
  exchange-token:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Request GitHub OIDC token
      - name: Request OIDC Token
        id: oidc_token
        uses: actions/github-script@v6
        with:
          script: |
            const core = require('@actions/core');
            const id_token = await core.getIDToken();
            core.setOutput('token', id_token);
            core.exportVariable('OIDC_TOKEN', id_token);

      # Step 2: Validate environment variables
      - name: Validate environment variables
        shell: pwsh
        env:
          TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        run: |
          # Documentation: This step validates that all required environment variables are set
          # before attempting to exchange tokens.
          
          if (-not $env:TENANT_ID) { Write-Host "❌ TENANT_ID not set."; exit 1 }
          if (-not $env:CLIENT_ID) { Write-Host "❌ CLIENT_ID not set."; exit 1 }
          if (-not $env:OIDC_TOKEN) { Write-Host "❌ OIDC_TOKEN not set."; exit 1 }
          if ($env:OIDC_TOKEN -notmatch '\.') { Write-Host "❌ OIDC_TOKEN is not a valid JWT."; exit 1 }
          Write-Host "✅ All environment variables are set correctly."

      # Step 3: Exchange OIDC token for Azure access token
      - name: Exchange OIDC Token for Azure Token
        shell: pwsh
        env:
          TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        run: |
          # Documentation: This step exchanges the GitHub OIDC token for an Azure AD access token
          # using federated credential authentication.
          # 
          # Requirements:
          #  - Azure App Registration with federated identity credential for GitHub Actions
          #    - Issuer: https://token.actions.githubusercontent.com
          #    - Subject: repo:<owner>/<repo>:environment:<env>  OR  repo:<owner>/<repo>:ref:refs/heads/main
          #  - OIDC_TOKEN from GitHub Actions (set in previous step)
          #  - TENANT_ID and CLIENT_ID from secrets
          # 
          # The client_assertion parameter MUST be the GitHub OIDC token - NOT an Azure access token.
          # This is required for the federated credential flow to work correctly.
          
          Add-Type -AssemblyName System.Web
          
          $body = @{  
            client_id             = $env:CLIENT_ID
            grant_type            = "client_credentials" 
            scope                 = "https://graph.microsoft.com/.default"
            client_assertion_type = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
            client_assertion      = $env:OIDC_TOKEN  # This MUST be the GitHub OIDC token
          }

          function ConvertTo-FormData($hash) {
            return ($hash.GetEnumerator() | ForEach-Object {
              [System.Web.HttpUtility]::UrlEncode($_.Key) + "=" + [System.Web.HttpUtility]::UrlEncode($_.Value)
            }) -join "&"
          }

          $bodyEncoded = ConvertTo-FormData $body
          $tokenUrl = "https://login.microsoftonline.com/$env:TENANT_ID/oauth2/v2.0/token"
          
          try {
            $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $bodyEncoded -ContentType "application/x-www-form-urlencoded"
            
            if (-not $resp.access_token) { 
              throw "Azure token exchange failed - no access token in response" 
            }
            
            "AZURE_TOKEN=$($resp.access_token)" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "Azure token acquired (first 20 chars): $($resp.access_token.Substring(0,20))"
          }
          catch {
            Write-Host "❌ Azure token exchange
