name: UAMI App Escalation (No-CLI)

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  escalate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: App token via GitHub OIDC (PowerShell)
        shell: pwsh
        env:
          UAMI_CLIENT_ID: ${{ secrets.UAMI_CLIENT_ID }}
          APP_CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          # A) Get GitHub OIDC ID token with audience api://AzureADTokenExchange
          $aud = [System.Uri]::EscapeDataString('api://AzureADTokenExchange')
          $oidcUrl = "$env:ACTIONS_ID_TOKEN_REQUEST_URL&audience=$aud"
          $gh = Invoke-RestMethod -Headers @{ Authorization = "Bearer $($env:ACTIONS_ID_TOKEN_REQUEST_TOKEN)" } -Uri $oidcUrl -Method GET
          $GitHubIdToken = $gh.value
          if(-not $GitHubIdToken){ throw 'Failed to obtain GitHub OIDC ID token' }
          # Show audience
          $parts = $GitHubIdToken.Split('.')
          $pl = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($parts[1].Replace('-','+').Replace('_','/').PadRight((([math]::Ceiling($parts[1].Length/4))*4),'='))) | ConvertFrom-Json
          Write-Host "GitHub OIDC aud: $($pl.aud)"

          # B) Exchange GitHub OIDC -> UAMI access token for api://AzureADTokenExchange using client_assertion
          $kvp1 = @{
            client_id             = $env:UAMI_CLIENT_ID
            grant_type            = 'client_credentials'
            client_assertion_type = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
            client_assertion      = $GitHubIdToken
            scope                 = 'api://AzureADTokenExchange/.default'
          }
          $body1 = ($kvp1.GetEnumerator() | ForEach-Object {
            '{0}={1}' -f [System.Uri]::EscapeDataString($_.Key), [System.Uri]::EscapeDataString([string]$_.Value)
          }) -join '&'

          $uamiResp = Invoke-RestMethod -Method Post `
            -Uri "https://login.microsoftonline.com/$($env:AZURE_TENANT_ID)/oauth2/v2.0/token" `
            -Headers @{ Accept = 'application/json' } `
            -ContentType 'application/x-www-form-urlencoded' `
            -Body $body1

          $UamiToken = $uamiResp.access_token
          if(-not $UamiToken){ throw 'Failed to obtain UAMI access token' }
          # Validate UAMI aud
          $parts = $UamiToken.Split('.')
          $p2 = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($parts[1].Replace('-','+').Replace('_','/').PadRight((([math]::Ceiling($parts[1].Length/4))*4),'='))) | ConvertFrom-Json
          Write-Host "UAMI aud: $($p2.aud)"
          $validAudiences = @('api://AzureADTokenExchange','fb60f99c-7a34-4190-8149-302f77469936')
          if($p2.aud -notin $validAudiences){ throw "Unexpected UAMI aud: $($p2.aud)" }

          # C) App token via client_credentials using GitHub OIDC as client_assertion
          # NOTE: Entra blocks using a token minted via FIC as another client_assertion (AADSTS700231).
          #       Therefore, the App's Federated Identity Credential must trust GitHub issuer/subject directly.
          $kvp2 = @{
            client_id             = $env:APP_CLIENT_ID
            grant_type            = 'client_credentials'
            client_assertion_type = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
            client_assertion      = $GitHubIdToken
            scope                 = 'https://graph.microsoft.com/.default'
          }
          $body2 = ($kvp2.GetEnumerator() | ForEach-Object {
            '{0}={1}' -f [System.Uri]::EscapeDataString($_.Key), [System.Uri]::EscapeDataString([string]$_.Value)
          }) -join '&'

          $tokenResp = Invoke-RestMethod -Method Post `
            -Uri "https://login.microsoftonline.com/$($env:AZURE_TENANT_ID)/oauth2/v2.0/token" `
            -Headers @{ Accept = 'application/json' } `
            -ContentType 'application/x-www-form-urlencoded' `
            -Body $body2

          $appToken = $tokenResp.access_token
          if(-not $appToken){ throw 'App token exchange failed' }

          # Smoke test with Graph
          $org = Invoke-RestMethod -Headers @{ Authorization = "Bearer $appToken" } -Uri 'https://graph.microsoft.com/v1.0/organization'
          $org.value | ForEach-Object { Write-Host "Org: $($_.id)" }
