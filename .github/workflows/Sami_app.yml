name: "Enterprise Infrastructure Automation (2)"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      operation_mode:
        description: 'Operation Mode'
        required: true
        default: 'monitoring'
        type: choice
        options:
        - monitoring
        - maintenance
        - emergency

permissions:
  id-token: write
  contents: read

env:
  OPERATION_ID: ${{ github.run_id }}-${{ github.run_attempt }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  UAMI_CLIENT_ID: ${{ secrets.UAMI_CLIENT_ID }}

jobs:
  infrastructure-automation:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: "Initialize Operation Context"
        shell: pwsh
        run: |
          Write-Host "üîß Starting infrastructure automation workflow" -ForegroundColor Cyan
          Write-Host "Operation ID: $env:OPERATION_ID" -ForegroundColor White
          Write-Host "Environment: ${{ inputs.environment }}" -ForegroundColor White
          Write-Host "Mode: ${{ inputs.operation_mode }}" -ForegroundColor White
          Write-Host "Timestamp: $((Get-Date).ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss UTC'))" -ForegroundColor White
      
      - name: "Acquire GitHub OIDC Token"
        shell: pwsh
        run: |
          Write-Host "üîê Acquiring GitHub OIDC authentication token..."
          
          $headers = @{ 'Authorization' = "Bearer $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN" }
          $uri = "$env:ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange"
          $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
          
          if (-not $response.value) {
            throw "‚ùå Failed to acquire GitHub OIDC token"
          }
          
          "GITHUB_TOKEN=$($response.value)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "‚úÖ GitHub OIDC token acquired successfully"
      
      - name: "Request UAMI Tokens"
        shell: pwsh
        run: |
          function Get-UAMIAccessToken {
              param([string]$Scope)
              $body = @{
                  'client_id' = $env:UAMI_CLIENT_ID
                  'grant_type' = 'client_credentials'
                  'client_assertion_type' = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  'client_assertion' = $env:GITHUB_TOKEN
                  'scope' = $Scope
              }
              $uri = "https://login.microsoftonline.com/$($env:TENANT_ID)/oauth2/v2.0/token"
              $response = Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType 'application/x-www-form-urlencoded'
              return $response.access_token
          }

          Write-Host "üîÑ Requesting tokens with UAMI federated credentials..."

          # Microsoft Graph
          $graphToken = Get-UAMIAccessToken -Scope "https://graph.microsoft.com/.default"
          "GRAPH_TOKEN=$graphToken" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "‚úÖ Graph token acquired"

          # Example: Azure Key Vault
          $kvToken = Get-UAMIAccessToken -Scope "https://vault.azure.net/.default"
          "KEYVAULT_TOKEN=$kvToken" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "‚úÖ Key Vault token acquired"
