name: UAMI Token Exchange Demo

on:
  workflow_dispatch:

permissions:
  id-token: write   # Required for GitHub OIDC
  contents: read

jobs:
  federated-login:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get GitHub OIDC token
        shell: pwsh
        run: |
          $audience = "api://AzureADTokenExchange"

          if (-not $env:ACTIONS_ID_TOKEN_REQUEST_URL) { throw "OIDC request URL not set" }
          if (-not $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN) { throw "OIDC request token not set" }

          # Request OIDC token from GitHub
          $jwtResponse = Invoke-RestMethod -Method Get `
              -Uri "$($env:ACTIONS_ID_TOKEN_REQUEST_URL)?audience=$audience" `
              -Headers @{ Authorization = "Bearer $($env:ACTIONS_ID_TOKEN_REQUEST_TOKEN)" }

          $oidcToken = $jwtResponse.value

          # Validate GitHub OIDC token
          if (-not $oidcToken) { throw "OIDC token not found" }
          if (($oidcToken -split '\.').Length -ne 3) { throw "OIDC token is not a valid JWT" }

          Write-Host "âœ… GitHub OIDC token acquired (first 20 chars): $($oidcToken.Substring(0,20))"
          $env:OIDC_TOKEN = $oidcToken
          echo "OIDC_TOKEN=$oidcToken" >> $env:GITHUB_ENV

      - name: Exchange GitHub OIDC token for UAMI token
        shell: pwsh
        run: |
          $tokenUrl = "https://login.microsoftonline.com/${{ secrets.AZURE_TENANT_ID }}/oauth2/v2.0/token"
          $body = @{
            grant_type = "urn:ietf:params:oauth:grant-type:token-exchange"
            client_id  = "${{ secrets.UAMI_CLIENT_ID }}"
            scope      = "https://graph.microsoft.com/.default"
            requested_token_use = "on_behalf_of"
            subject_token_type  = "urn:ietf:params:oauth:token-type:jwt"
            subject_token       = "${{ env.OIDC_TOKEN }}"
          }

          $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $body -ContentType "application/x-www-form-urlencoded"
          $uamiToken = $resp.access_token

          if (-not $uamiToken) { throw "Failed to acquire UAMI token" }

          Write-Host "âœ… UAMI token acquired (first 20 chars): $($uamiToken.Substring(0,20))"
          echo "UAMI_TOKEN=$uamiToken" >> $env:GITHUB_ENV

      - name: Validate UAMI token claims
        shell: pwsh
        run: |
          function Decode-JWT ($jwt) {
            $parts = $jwt -split '\.'
            $payload = $parts[1].Replace('-', '+').Replace('_', '/')
            switch ($payload.Length % 4) {
              2 { $payload += '==' }
              3 { $payload += '=' }
            }
            $bytes = [System.Convert]::FromBase64String($payload)
            [System.Text.Encoding]::UTF8.GetString($bytes) | ConvertFrom-Json
          }

          $claims = Decode-JWT "${{ env.UAMI_TOKEN }}"

          Write-Host "ðŸ”Ž Token claims:"
          $claims | Format-List

          # Expected values
          $expectedIssuer = "https://login.microsoftonline.com/${{ env.TENANT_ID }}/v2.0"
          $expectedSub    = "${{ env.UAMI_PRINCIPAL_ID }}"   # <-- This must match UAMI principalId
          $expectedAud    = "api://AzureADTokenExchange"

          if ($claims.iss -ne $expectedIssuer) { throw "Issuer mismatch: $($claims.iss)" }
          if ($claims.sub -ne $expectedSub)    { throw "Subject mismatch: $($claims.sub)" }
          if ($claims.aud -ne $expectedAud)    { throw "Audience mismatch: $($claims.aud)" }

          Write-Host "âœ… UAMI token validated successfully against App Registration federated credential"

      - name: Exchange UAMI token for App token
        shell: pwsh
        run: |
          $tokenUrl = "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token"
          $body = @{
            grant_type = "urn:ietf:params:oauth:grant-type:token-exchange"
            client_id  = "${{ env.APP_CLIENT_ID }}"
            scope      = "${{ env.GRAPH_SCOPE }}"
            requested_token_use = "on_behalf_of"
            subject_token_type  = "urn:ietf:params:oauth:token-type:access_token"
            subject_token       = "${{ env.UAMI_TOKEN }}"
          }

          $resp = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $body -ContentType "application/x-www-form-urlencoded"
          $appToken = $resp.access_token

          if (-not $appToken) { throw "Failed to acquire App token" }

          Write-Host "âœ… App token acquired (first 20 chars): $($appToken.Substring(0,20))"
          echo "APP_TOKEN=$appToken" >> $env:GITHUB_ENV

      - name: Call Microsoft Graph with App token
        shell: pwsh
        run: |
          $headers = @{ Authorization = "Bearer $env:APP_TOKEN" }
          $resp = Invoke-RestMethod -Method Get -Uri "https://graph.microsoft.com/v1.0/users" -Headers $headers
          Write-Host "âœ… Graph API call succeeded"
          $resp.value | Select-Object id,displayName,userPrincipalName | Format-Table

    env:
      TENANT_ID: "<your-tenant-id>"
      UAMI_CLIENT_ID: "<your-uami-client-id>"
      UAMI_PRINCIPAL_ID: "<your-uami-principal-id>"   # needed for validation
      APP_CLIENT_ID: "<your-app-client-id>"
      GRAPH_SCOPE: "https://graph.microsoft.com/.default"
